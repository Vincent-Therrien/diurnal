"""
    Demonstration for RNA databases visualization.

    Assumes that the directory "data/formatted" contains formatted RNA
    structure data. This dataset can be generated by executing the
    script `demo/preprocessing.py`.

    - Author: Vincent Therrien (therrien.vincent.2@courrier.uqam.ca)
    - Affiliation: Département d'informatique, UQÀM
    - File creation date: June 2023
    - License: MIT
"""


import numpy as np
from diurnal import align, database, family, structure, train, visualize
import diurnal.utils.rna_data as rna_data


data = np.load("./data/RNASTRalign_formatted_128/train/bracket.npy")
brackets = ["".join(structure.Secondary.to_bracket(l)) for l in data]
stripped = [b.replace("-", "") for b in brackets]
visualize.lengths(stripped)

data = np.load("./data/RNASTRalign_formatted_128/train/potential_pairings_scalar.npy")
visualize.heatmap(data)

data = np.load("./data/RNASTRalign_formatted_128/train/contact.npy")
visualize.heatmap(data)

exit()


SIZE = 256
DATABASE = "archiveII"

SRC = f"./data/{DATABASE}"
DST = f"./data/families_{SIZE}/"


# Preprocessing
database.download("./data/", DATABASE)
names = database.format_filenames(SRC, DST + "names.txt", SIZE)

for f in family.NAMES:
    dst = f"{DST}{f}/"
    names = database.format_filenames(SRC, f"{dst}names.txt", SIZE, [f])
    if not names:
        continue
    database.format_primary_structure(
        names, f"{dst}optimal_fold_alignments.npy",
        SIZE, align.optimal_fold_contact_matrix
    )
    database.format_primary_structure(
        names, f"{dst}fold_alignments_3.npy",
        SIZE, align.fold_contact_matrix
    )
    alignment_4 = lambda x, y : align.fold_contact_matrix(x, y, 4)
    database.format_primary_structure(
        names, f"{dst}fold_alignments_4.npy",
        SIZE, alignment_4
    )
    database.format_primary_structure(
        names, f"{dst}potential_pairings.npy",
        SIZE, structure.Primary.to_matrix
    )
    database.format_primary_structure(
        names, f"{dst}masks.npy",
        SIZE, structure.Primary.to_mask
    )
    database.format_primary_structure(
        names, f"{dst}onehot.npy",
        SIZE, structure.Primary.to_onehot
    )
    database.format_secondary_structure(
        names, f"{dst}contact.npy", SIZE, structure.Secondary.to_matrix
    )
    database.format_secondary_structure(
        names, f"{dst}bracket.npy", SIZE, structure.Secondary.to_onehot
    )

alignments = np.load(f"{DST}/SRP/fold_alignments_4.npy")
masks = np.load(f"{DST}/SRP/masks.npy")
for i in range(len(alignments)):
    alignments[i] *= masks[i]
visualize.heatmap(alignments, f"Alignment of family SRP")
exit()


_, b, p = rna_data.read_ct_file("data/archiveII/5s_Acanthamoeba-castellanii-1.ct")
potential_pairings = structure.Primary.to_matrix(b)
secondary = structure.Secondary.to_matrix(p)
print("Visualize the secondary structure of an RNA molecule.")
visualize.secondary_structure(secondary, b)
print("Visualize the full structure of an RNA molecule.")
visualize.potential_pairings(potential_pairings, b, secondary)

print("Visualize the secondary structures of RNA families.")
SIZE = 256
database.download("./data/", "archiveII")
database.format_basic(
    "./data/archiveII",  # Directory of the raw data to format.
    f"./data/formatted_matrix_{SIZE}",  # Formatted data output directory.
    SIZE,  # Normalized size.
    structure.Primary.to_matrix,
    structure.Secondary.to_matrix,
    verbosity=2
)

for name in family.NAMES:
    set = train.load_families(f"./data/formatted_matrix_{SIZE}", name)
    if not set["output"]:
        continue
    visualize.secondary_structures_heatmap(
        set["output"],
        f"Aggregated secondary structures of family {name}"
    )
